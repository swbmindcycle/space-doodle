The code package provided here is to be used for QuickSight user-based embedding workshop.
User-based embedding workshop is designed with minimal set of components with the intent to help you get familiar with embedding.
When designing your own production systems, ensure that you evaluate the needs of your system and design accordingly.

We are doing just in time user provisioning in this workshop.
So, when you login with the cognito credentials for the first time, code in this package does the following
- Register corresponding user into QuickSight
- Create an EmbeddedDemoReaders group
- Adds the user to above grroup.
This is to keep the flow as smooth as possible for you.

When building your production system, our recommendation is to pre-register the user as part of your application user onboarding if possible.
This will help in avoiding a few seconds of extra wait time for the user's first dashboard launch.
If pre-registering is not possible due to application constraints, you can ofcourse do just in time provisioning as done here.

ADDITIONAL OPTIONS

1) Q Embedding - This is applicable only to accounts that have Q enabled.
Additionally, you will have to allow list https://<region>.quicksight.aws.amazon.com in QuickSight management panel under Domains and Embedding section.
Also, make sure that you have shared at least one Q topic with the user / relevant EmbeddedDemoReaders group.

To enable Q embedding section of this package (once above prerequisites are met), 
add the following env variable under lambda configuration.

QDisplaySelection : Valid values - ShowQ and HideQ


2) Local Token Validation 
In default flow, we will leverage STS assume_role_with_web_identity to verify the token.
We are not really using the returned credentials to do anything with this role. 
Rather, just relying in a successful call to know that token is valid.
Token can be verified locally as well. In python, we can leverage python-jose library for this. 
Other languages might offer similar libraries as well.
To run in local verification mode, two additional env variables need to be added in lambda configuration.

AuthEvalMode          : Local
CognitoUserPoolId     : <User pool id from Cognito>

When configured in this mode, STS assume role API won't be called. 
You can verify that the flow is not using STS by updating the trust relationship of the role in IAM (add a suffix to the Federated Principal arn) 
or by deleting the Identity provider mapping in IAM altogether.
